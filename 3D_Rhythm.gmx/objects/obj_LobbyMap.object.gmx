<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///변수 초기화

TilesOpen = noone;
TileOpenCount = 0;
TileOpenTime = 0;
TileOpenRate = 6;

TilesClose = noone;
TileCloseCount = 0;
TileCloseTime = 0;
TileCloseRate = 3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///타일 생성

for(var i = 0; i &lt; ceil(obj_Jukebox.Length / 2) * 4; i++)
{
    for(var j = -3; j &lt;= -1; j++)
    {
        var tile = instance_create_3d(i * 10, j * 10, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, obj_Tile);
        if(j == -3 &amp;&amp; i % 4 == 3) tile.ModelIndex = 1;
    }
    
    for(var j = 1; j &lt;= 3; j++)
    {
        var tile = instance_create_3d(i * 10, j * 10, 0, 0, 1, 0, -1, 0, 0, 0, 0, 1, obj_Tile);
        if(j == 3 &amp;&amp; i % 4 == 3) tile.ModelIndex = 1;
    }
    
    var tile = instance_create_3d(i * 10, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, obj_Tile);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///타일 펼치는 순서를 기록

TilesOpen[0, 0] = instance_position_3d(0, 0, 0, obj_Tile);
    
var count = 0;

do
{
    count = 0;
    
    for(var i = 0; i &lt; array_length_2d(TilesOpen, TileOpenCount); i++)
    {
        var px = TilesOpen[TileOpenCount, i].PositionX;
        var py = TilesOpen[TileOpenCount, i].PositionY;
        var pz = TilesOpen[TileOpenCount, i].PositionZ;
    
        var tile = instance_position_3d(px + 10, py, pz, obj_Tile);
        if(tile != noone &amp;&amp; !tile_exist(TilesOpen, tile))
        {
            TilesOpen[TileOpenCount + 1, count] = tile;
            count++;
        }
            
        var tile = instance_position_3d(px - 10, py, pz, obj_Tile);
        if(tile != noone &amp;&amp; !tile_exist(TilesOpen, tile))
        {
            TilesOpen[TileOpenCount + 1, count] = tile;
            count++;
        }
            
        var tile = instance_position_3d(px, py + 10, pz, obj_Tile);
        if(tile != noone &amp;&amp; !tile_exist(TilesOpen, tile))
        {
            TilesOpen[TileOpenCount + 1, count] = tile;
            count++;
        }
            
        var tile = instance_position_3d(px, py - 10, pz, obj_Tile);
        if(tile != noone &amp;&amp; !tile_exist(TilesOpen, tile))
        {
            TilesOpen[TileOpenCount + 1, count] = tile;
            count++;
        }
    }      
    TileOpenCount++;
} until(count == 0);

alarm[0] = TileOpenRate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; array_length_2d(TilesClose, TileCloseTime); i++)
{
    with(TilesClose[TileCloseTime, i]) event_user(1);
}

if(TileCloseTime++ &lt; array_height_2d(TilesClose))
{
    alarm[1] = TileCloseRate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; array_length_2d(TilesOpen, TileOpenTime); i++)
{
    with(TilesOpen[TileOpenTime, i]) event_user(0);
}

if(TileOpenTime++ &lt; array_height_2d(TilesOpen) - 1)
{
    alarm[0] = TileOpenRate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>TilesClose[0, 0] = instance_position_3d(obj_Cube.PositionX, obj_Cube.PositionY, obj_Cube.PositionZ, obj_Tile);

var count = 0;

do
{
    count = 0;
    
    for(var i = 0; i &lt; array_length_2d(TilesClose, TileCloseCount); i++)
    {
        var px = TilesClose[TileCloseCount, i].PositionX;
        var py = TilesClose[TileCloseCount, i].PositionY;
        var pz = TilesClose[TileCloseCount, i].PositionZ;
    
        var tile = instance_position_3d(px + 10, py, pz, obj_Tile);
        if(tile != noone &amp;&amp; !tile_exist(TilesClose, tile))
        {
            TilesClose[TileCloseCount + 1, count] = tile;
            count++;
        }
            
        var tile = instance_position_3d(px - 10, py, pz, obj_Tile);
        if(tile != noone &amp;&amp; !tile_exist(TilesClose, tile))
        {
            TilesClose[TileCloseCount + 1, count] = tile;
            count++;
        }
            
        var tile = instance_position_3d(px, py + 10, pz, obj_Tile);
        if(tile != noone &amp;&amp; !tile_exist(TilesClose, tile))
        {
            TilesClose[TileCloseCount + 1, count] = tile;
            count++;
        }
            
        var tile = instance_position_3d(px, py - 10, pz, obj_Tile);
        if(tile != noone &amp;&amp; !tile_exist(TilesClose, tile))
        {
            TilesClose[TileCloseCount + 1, count] = tile;
            count++;
        }
    }      
    TileCloseCount++;
} until(count == 0);

var temp = noone;
for(var i = 1; i &lt; array_height_2d(TilesClose); i++)
{
    for(var j = 0; j &lt; array_length_2d(TilesClose, i); j++)
    {
        temp[(array_height_2d(TilesClose) - 1) - i, j] = TilesClose[i, j];
    }
}
TilesClose = temp;

alarm[1] = TileCloseRate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
