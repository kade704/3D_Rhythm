<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load Data From File
Data = get_song_data(ds_grid_get(obj_JukeBox.Songs, 5, obj_JukeBox.Selected));
Length = array_height_2d(Data);

Positions[0, 0] = 0;
Positions[0, 1] = 0;
Positions[0, 2] = 0;

Vectors[0, 0] = 1;
Vectors[0, 1] = 0;
Vectors[0, 2] = 0;

Normals[0, 0] = 0;
Normals[0, 1] = 0;
Normals[0, 2] = 1;
show_debug_message(Length);

for(var i = 1; i &lt; Length; i++)
{
    if(Data[i, 0] == -1) //좌회전 진행
    {   
        var u = cross(Vectors[i - 1, 0], Vectors[i - 1, 1], Vectors[i - 1, 2], Normals[i - 1, 0], Normals[i - 1, 1], Normals[i - 1, 2]);
        u = normalize(u[0], u[1], u[2]);
        
        var angle = (90 * Data[i, 1]) - 90;
        
        var v = rotate_axis(u[0], u[1], u[2], Vectors[i - 1, 0], Vectors[i - 1, 1], Vectors[i - 1, 2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (u[0] * 5) + (v[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (u[1] * 5) + (v[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (u[2] * 5) + (v[2] * 5);
        
        Vectors[i, 0] = v[0];
        Vectors[i, 1] = v[1];
        Vectors[i, 2] = v[2];
        
        var n = rotate_axis(Normals[i - 1, 0], Normals[i - 1, 1], Normals[i - 1, 2], Vectors[i - 1, 0], Vectors[i - 1, 1], Vectors[i - 1, 2], angle);
        Normals[i, 0] = n[0];
        Normals[i, 1] = n[1];
        Normals[i, 2] = n[2];
    }
    else if(Data[i, 0] == 1) //우회전 진행
    {   
        var u = cross(Normals[i - 1, 0], Normals[i - 1, 1], Normals[i - 1, 2], Vectors[i - 1, 0], Vectors[i - 1, 1], Vectors[i - 1, 2]);
        u = normalize(u[0], u[1], u[2]);
        
        var angle = 90 - (90 * Data[i, 1]);
        
        var v = rotate_axis(u[0], u[1], u[2], Vectors[i - 1, 0], Vectors[i - 1, 1], Vectors[i - 1, 2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (u[0] * 5) + (v[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (u[1] * 5) + (v[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (u[2] * 5) + (v[2] * 5);
        
        Vectors[i, 0] = v[0];
        Vectors[i, 1] = v[1];
        Vectors[i, 2] = v[2];
        
        var n = rotate_axis(Normals[i - 1, 0], Normals[i - 1, 1], Normals[i - 1, 2], Vectors[i - 1, 0], Vectors[i - 1, 1], Vectors[i - 1, 2], angle);
        Normals[i, 0] = n[0];
        Normals[i, 1] = n[1];
        Normals[i, 2] = n[2];
    }
    else //직진 진행
    {
        var u = cross(Vectors[i - 1, 0], Vectors[i - 1, 1], Vectors[i - 1, 2], Normals[i - 1, 0], Normals[i - 1, 1], Normals[i - 1, 2]);
        u = normalize(u[0], u[1], u[2]);
        
        var angle = 90 - (90 * Data[i, 1]);
        
        var v = rotate_axis(Vectors[i - 1, 0], Vectors[i - 1, 1], Vectors[i - 1, 2], u[0], u[1], u[2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (Vectors[i - 1, 0] * 5) + (v[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (Vectors[i - 1, 1] * 5) + (v[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (Vectors[i - 1, 2] * 5) + (v[2] * 5);
        
        Vectors[i, 0] = v[0];
        Vectors[i, 1] = v[1];
        Vectors[i, 2] = v[2];
        
        var nv = rotate_axis(Normals[i - 1, 0], Normals[i - 1, 1], Normals[i - 1, 2], u[0], u[1], u[2], angle);
        Normals[i, 0] = nv[0];
        Normals[i, 1] = nv[1];
        Normals[i, 2] = nv[2];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
