<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load Song and Initialization Data
Data = get_song_data("GoLike.txt");
Length = array_height_2d(Data);
Vertices = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization Vertices

Vertices[0, 0] = 0;
Vertices[0, 1] = -5;
Vertices[0, 2] = 0;

Vertices[1, 0] = 0;
Vertices[1, 1] = 5;
Vertices[1, 2] = 0;

Vertices[2, 0] = 10;
Vertices[2, 1] = -5;
Vertices[2, 2] = 0;

Vertices[3, 0] = 10;
Vertices[3, 1] = 5;
Vertices[3, 2] = 0;

for(var i = 0; i &lt; Length; i++)
{
    var current = i * 4;
    var next = (i + 1) * 4;

    if(Data[i, 0] == -1)
    {  
        var u = normalize(Vertices[current + 2, 0] - Vertices[current, 0], Vertices[current + 2, 1] - Vertices[current, 1], Vertices[current + 2, 2] - Vertices[current, 2]);
    
        var v1 = rotate_axis(Vertices[current, 0] - Vertices[current + 1, 0], Vertices[current, 1] - Vertices[current + 1, 1], Vertices[current, 2] - Vertices[current + 1, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
        var v2 = rotate_axis(Vertices[current + 2, 0] - Vertices[current + 3, 0], Vertices[current + 2, 1] - Vertices[current + 3, 1], Vertices[current + 2, 2] - Vertices[current + 3, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
    
        Vertices[next, 0] = Vertices[current, 0];
        Vertices[next, 1] = Vertices[current, 1];
        Vertices[next, 2] = Vertices[current, 2];
        
        Vertices[next + 1, 0] = Vertices[current + 2, 0];
        Vertices[next + 1, 1] = Vertices[current + 2, 1];
        Vertices[next + 1, 2] = Vertices[current + 2, 2];
        
        Vertices[next + 2, 0] = Vertices[current + 0, 0] + v1[0]; 
        Vertices[next + 2, 1] = Vertices[current + 0, 1] + v1[1];
        Vertices[next + 2, 2] = Vertices[current + 0, 2] + v1[2];
            
        Vertices[next + 3, 0] = Vertices[current + 2, 0] + v2[0]; 
        Vertices[next + 3, 1] = Vertices[current + 2, 1] + v2[1];
        Vertices[next + 3, 2] = Vertices[current + 2, 2] + v2[2];
    }
    else if(Data[i, 0] == 1)
    {
        var u = normalize(Vertices[current + 3, 0] - Vertices[current + 1, 0], Vertices[current + 3, 1] - Vertices[current + 1, 1], Vertices[current + 3, 2] - Vertices[current + 1, 2]);
    
        var v1 = rotate_axis(Vertices[current + 3, 0] - Vertices[current + 2, 0], Vertices[current + 3, 1] - Vertices[current + 2, 1], Vertices[current + 3, 2] - Vertices[current + 2, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
        var v2 = rotate_axis(Vertices[current + 1, 0] - Vertices[current, 0], Vertices[current + 1, 1] - Vertices[current, 1], Vertices[current + 1, 2] - Vertices[current, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
    
        Vertices[next, 0] = Vertices[current + 3, 0];
        Vertices[next, 1] = Vertices[current + 3, 1];
        Vertices[next, 2] = Vertices[current + 3, 2];
        
        Vertices[next + 1, 0] = Vertices[current + 1, 0];
        Vertices[next + 1, 1] = Vertices[current + 1, 1];
        Vertices[next + 1, 2] = Vertices[current + 1, 2];
        
        Vertices[next + 2, 0] = Vertices[current + 3, 0] + v1[0]; 
        Vertices[next + 2, 1] = Vertices[current + 3, 1] + v1[1];
        Vertices[next + 2, 2] = Vertices[current + 3, 2] + v1[2];
            
        Vertices[next + 3, 0] = Vertices[current + 1, 0] + v2[0]; 
        Vertices[next + 3, 1] = Vertices[current + 1, 1] + v2[1];
        Vertices[next + 3, 2] = Vertices[current + 1, 2] + v2[2];
    }
    else
    {
        var u = normalize(Vertices[current + 2, 0] - Vertices[current + 3, 0], Vertices[current + 2, 1] - Vertices[current + 3, 1], Vertices[current + 2, 2] - Vertices[current + 3, 2]);
    
        var v1 = rotate_axis(Vertices[current + 2, 0] - Vertices[current, 0], Vertices[current + 2, 1] - Vertices[current, 1], Vertices[current + 2, 2] - Vertices[current, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
        var v2 = rotate_axis(Vertices[current + 3, 0] - Vertices[current + 1, 0], Vertices[current + 3, 1] - Vertices[current + 1, 1], Vertices[current + 3, 2] - Vertices[current + 1, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
    
        Vertices[next, 0] = Vertices[current + 2, 0];
        Vertices[next, 1] = Vertices[current + 2, 1];
        Vertices[next, 2] = Vertices[current + 2, 2];
        
        Vertices[next + 1, 0] = Vertices[current + 3, 0];
        Vertices[next + 1, 1] = Vertices[current + 3, 1];
        Vertices[next + 1, 2] = Vertices[current + 3, 2];
        
        Vertices[next + 2, 0] = Vertices[current + 2, 0] + v1[0]; 
        Vertices[next + 2, 1] = Vertices[current + 2, 1] + v1[1];
        Vertices[next + 2, 2] = Vertices[current + 2, 2] + v1[2];
            
        Vertices[next + 3, 0] = Vertices[current + 3, 0] + v2[0]; 
        Vertices[next + 3, 1] = Vertices[current + 3, 1] + v2[1];
        Vertices[next + 3, 2] = Vertices[current + 3, 2] + v2[2];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; (Length + 1); i++)
{
    draw_quad(i * 4, make_colour_rgb(255, 255, 255))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
