<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Data = get_song_data("asd.txt");
Length = array_height_2d(Data);
show_debug_message(Length);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var vertices = noone;

vertices[0, 0] = 0;
vertices[0, 1] = -5;
vertices[0, 2] = 0;

vertices[1, 0] = 0;
vertices[1, 1] = 5;
vertices[1, 2] = 0;

vertices[2, 0] = 10;
vertices[2, 1] = -5;
vertices[2, 2] = 0;

vertices[3, 0] = 10;
vertices[3, 1] = 5;
vertices[3, 2] = 0;

draw_quad();


for(var i = 0; i &lt; Length; i++)
{
    if(Data[i, 0] == 1)
    {  
        var u = normalize(vertices[2, 0] - vertices[0, 0], vertices[2, 1] - vertices[0, 1], vertices[2, 2] - vertices[0, 2]);
    
        var v1 = rotate_axis(vertices[0, 0] - vertices[1, 0], vertices[0, 1] - vertices[1, 1], vertices[0, 2] - vertices[1, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
        var v2 = rotate_axis(vertices[2, 0] - vertices[3, 0], vertices[2, 1] - vertices[3, 1], vertices[2, 2] - vertices[3, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
    
        var px1 = vertices[0, 0] + v1[0]; 
        var py1 = vertices[0, 1] + v1[1];
        var pz1 = vertices[0, 2] + v1[2];
            
        var px2 = vertices[2, 0] + v2[0]; 
        var py2 = vertices[2, 1] + v2[1];
        var pz2 = vertices[2, 2] + v2[2];
            
        vertices[1, 0] = vertices[2, 0];
        vertices[1, 1] = vertices[2, 1];
        vertices[1, 2] = vertices[2, 2];
            
        vertices[2, 0] = px1;
        vertices[2, 1] = py1;
        vertices[2, 2] = pz1;
            
        vertices[3, 0] = px2;
        vertices[3, 1] = py2;
        vertices[3, 2] = pz2;
    }
    else if(Data[i, 0] == -1)
    {
        var u = normalize(vertices[3, 0] - vertices[1, 0], vertices[3, 1] - vertices[1, 1], vertices[3, 2] - vertices[1, 2]);
    
        var v1 = rotate_axis(vertices[3, 0] - vertices[2, 0], vertices[3, 1] - vertices[2, 1], vertices[3, 2] - vertices[2, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
        var v2 = rotate_axis(vertices[1, 0] - vertices[0, 0], vertices[1, 1] - vertices[0, 1], vertices[1, 2] - vertices[0, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
    
        var px1 = vertices[3, 0] + v1[0]; 
        var py1 = vertices[3, 1] + v1[1];
        var pz1 = vertices[3, 2] + v1[2];
            
        var px2 = vertices[1, 0] + v2[0]; 
        var py2 = vertices[1, 1] + v2[1];
        var pz2 = vertices[1, 2] + v2[2];
            
        vertices[0, 0] = vertices[3, 0];
        vertices[0, 1] = vertices[3, 1];
        vertices[0, 2] = vertices[3, 2];
            
        vertices[2, 0] = px1;
        vertices[2, 1] = py1;
        vertices[2, 2] = pz1;
            
        vertices[3, 0] = px2;
        vertices[3, 1] = py2;
        vertices[3, 2] = pz2;
    }
    else
    {
        var u = normalize(vertices[2, 0] - vertices[3, 0], vertices[2, 1] - vertices[3, 1], vertices[2, 2] - vertices[3, 2]);
    
        var v1 = rotate_axis(vertices[2, 0] - vertices[0, 0], vertices[2, 1] - vertices[0, 1], vertices[2, 2] - vertices[0, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
        var v2 = rotate_axis(vertices[3, 0] - vertices[1, 0], vertices[3, 1] - vertices[1, 1], vertices[3, 2] - vertices[1, 2], u[0], u[1], u[2], 90 - (Data[i, 1] * 90));
    
        var px1 = vertices[2, 0] + v1[0]; 
        var py1 = vertices[2, 1] + v1[1];
        var pz1 = vertices[2, 2] + v1[2];
            
        var px2 = vertices[3, 0] + v2[0]; 
        var py2 = vertices[3, 1] + v2[1];
        var pz2 = vertices[3, 2] + v2[2];
            
        vertices[0, 0] = vertices[2, 0];
        vertices[0, 1] = vertices[2, 1];
        vertices[0, 2] = vertices[2, 2];
            
        vertices[1, 0] = vertices[3, 0];
        vertices[1, 1] = vertices[3, 1];
        vertices[1, 2] = vertices[3, 2];
            
        vertices[2, 0] = px1;
        vertices[2, 1] = py1;
        vertices[2, 2] = pz1;
            
        vertices[3, 0] = px2;
        vertices[3, 1] = py2;
        vertices[3, 2] = pz2;
    }
    draw_quad();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
