<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///변수 초기화

Index = 1;
Angle = 0;

TimeStart = 0;

IsHitted = false;
JudgementRate = 150;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 모델 불러오기

Model = load_model("Model/untitled.obj");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 형태 변환

if(obj_JukeBox.IsPlaying)
{
    if(obj_Data.Timeline[Index] &lt; current_time - TimeStart &amp;&amp; Index &lt; obj_Data.Length - 1)
    {
        Index++;
        Angle = (obj_Data.Data[Index, 1] * 90) - 90;
    }
    Angle -= 90 / (obj_Data.OneBeatRate / (delta_time * 0.001));
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///노트 판정

if(obj_JukeBox.IsPlaying)
{
    var key = keyboard_check_pressed(vk_anykey);
    
    if((obj_Data.Timeline[Index] - current_time + TimeStart) &lt; JudgementRate)
    {
        if(obj_Data.NoteHits[Index] == noone &amp;&amp; key)
        {
            obj_Data.NoteHits[Index] = 1;
        }
    }
    
    if((obj_Data.Timeline[Index] - current_time + TimeStart) &gt; JudgementRate 
    &amp;&amp; (current_time - TimeStart - obj_Data.Timeline[Index - 1]) &gt; JudgementRate)
    {
        if(obj_Data.NoteHits[Index] == noone &amp;&amp; key)
        {
            obj_Data.NoteHits[Index] = 0;
        } 
    }
    
    if(Index &gt; 1)
    {
        if((current_time - TimeStart - obj_Data.Timeline[Index - 1]) &lt; JudgementRate) 
        {
            if(obj_Data.NoteHits[Index - 1] == noone &amp;&amp; key)
            {
                obj_Data.NoteHits[Index - 1] = 1;
            }
        }
        else 
        {
            if(obj_Data.NoteHits[Index - 1] == noone)
            {
                obj_Data.NoteHits[Index - 1] = 0;
            } 
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>TimeStart = current_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var u = cross(obj_Data.Vectors[Index, 0], obj_Data.Vectors[Index, 1], obj_Data.Vectors[Index, 2], obj_Data.Normals[Index, 0], obj_Data.Normals[Index, 1], obj_Data.Normals[Index, 2]);
u = normalize(u[0], u[1], u[2]);

var pv = rotate_axis(obj_Data.Vectors[Index, 0], obj_Data.Vectors[Index, 1], obj_Data.Vectors[Index, 2], u[0], u[1], u[2], Angle + 135);

var px = obj_Data.Positions[Index, 0] + (obj_Data.Vectors[Index, 0] * -5) + (pv[0] * 5 * sqrt(2));
var py = obj_Data.Positions[Index, 1] + (obj_Data.Vectors[Index, 1] * -5) + (pv[1] * 5 * sqrt(2));
var pz = obj_Data.Positions[Index, 2] + (obj_Data.Vectors[Index, 2] * -5) + (pv[2] * 5 * sqrt(2));

var vv = rotate_axis(obj_Data.Vectors[Index, 0], obj_Data.Vectors[Index, 1], obj_Data.Vectors[Index, 2], u[0], u[1], u[2], Angle);

var vx = vv[0];
var vy = vv[1];
var vz = vv[2];

var nv = rotate_axis(obj_Data.Normals[Index, 0], obj_Data.Normals[Index, 1], obj_Data.Normals[Index, 2], u[0], u[1], u[2], Angle);

var nx = nv[0];
var ny = nv[1];
var nz = nv[2];

//draw_cube(px, py, pz, vx, vy, vz, nx, ny, nz, 10, 0.2, make_colour_rgb(125, 80, 255), 1); 

//draw_model(0, 0, 0, 0, 0, 0, 0, 0, 0, Model, 5, 1);

draw_set_colour(c_white);
d3d_draw_block(-5, -5, -5, 5, 5, 5 ,-1, 1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
