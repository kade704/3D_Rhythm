<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///변수 초기화

TileIndex = 0;
CubeIndex = 0;

SongStartTime = 0;
IsTileOpening = false;
TileOpenTime = 0;
IsGamePlaying = false;
GameStartTime = 0;

IsHitted = true;
IsInMissJudgement = false;
JudgementRate = 120;

for(var i = 0; i &lt; 4; i++)
{
    IsTicked[i] = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 파일에서 데이터 불러오기

var path = song_get_path(obj_Jukebox.Selected);

Data[0, 0] = 0;
Data[0, 1] = 1;
Data[0, 2] = 1;

if(file_exists(path))
{
    var file = file_text_open_read(path);    

    for(var i = 1; !file_text_eof(file); i++)
    {
        Data[i, 0] = file_text_read_real(file);
        Data[i, 1] = file_text_read_real(file);
        Data[i, 2] = file_text_read_real(file);
        file_text_readln(file);
    }
    file_text_close(file);
    
    log("File Successfully Loaded : " + path);
}
else 
{
    error("File does not exist. : " + path);
}

DataLength = array_height_2d(Data);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 데이터를 기반으로 위치, 포워드, 라이트, 업 벡터 생성하기

Positions[0, 0] = 0;
Positions[0, 1] = 0;
Positions[0, 2] = 0;

Forwards[0, 0] = 1;
Forwards[0, 1] = 0;
Forwards[0, 2] = 0;

Rights[0, 0] = 0;
Rights[0, 1] = 1;
Rights[0, 2] = 0;

Ups[0, 0] = 0;
Ups[0, 1] = 0;
Ups[0, 2] = 1;

for(var i = 1; i &lt; DataLength; i++)
{
    if(Data[i, 0] == 1) //좌회전 진행
    {   
        var angle = (90 * Data[i, 1]) - 90;
        
        var d = rotate_axis(-Rights[i - 1, 0], -Rights[i - 1, 1], -Rights[i - 1, 2], Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (-Rights[i - 1, 0] * 5) + (d[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (-Rights[i - 1, 1] * 5) + (d[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (-Rights[i - 1, 2] * 5) + (d[2] * 5);
        
        Forwards[i, 0] = d[0];
        Forwards[i, 1] = d[1];
        Forwards[i, 2] = d[2];
        
        Rights[i, 0] = Forwards[i - 1, 0];
        Rights[i, 1] = Forwards[i - 1, 1];
        Rights[i, 2] = Forwards[i - 1, 2];
        
        var u = rotate_axis(Ups[i - 1, 0], Ups[i - 1, 1], Ups[i - 1, 2], Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], angle);
        Ups[i, 0] = u[0];
        Ups[i, 1] = u[1];
        Ups[i, 2] = u[2];
    }
    else if(Data[i, 0] == 2) //직진 진행 
    {   
    
        var angle = (90 * Data[i, 1] - 90);
        
        var d = rotate_axis(Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], Rights[i - 1, 0], Rights[i - 1, 1], Rights[i - 1, 2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (Forwards[i - 1, 0] * 5) + (d[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (Forwards[i - 1, 1] * 5) + (d[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (Forwards[i - 1, 2] * 5) + (d[2] * 5);
        
        Forwards[i, 0] = d[0];
        Forwards[i, 1] = d[1];
        Forwards[i, 2] = d[2];
        
        Rights[i, 0] = Rights[i - 1, 0];
        Rights[i, 1] = Rights[i - 1, 1];
        Rights[i, 2] = Rights[i - 1, 2];
        
        var u = rotate_axis(Ups[i - 1, 0], Ups[i - 1, 1], Ups[i - 1, 2], Rights[i - 1, 0], Rights[i - 1, 1], Rights[i - 1, 2], angle);
        Ups[i, 0] = u[0];
        Ups[i, 1] = u[1];
        Ups[i, 2] = u[2];
    
    }
    else if(Data[i, 0] == 3) //우회전 진행
    {
        var angle = 90 - (90 * Data[i, 1]);
        
        var d = rotate_axis(Rights[i - 1, 0], Rights[i - 1, 1], Rights[i - 1, 2], Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (Rights[i - 1, 0] * 5) + (d[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (Rights[i - 1, 1] * 5) + (d[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (Rights[i - 1, 2] * 5) + (d[2] * 5);
        
        Forwards[i, 0] = d[0];
        Forwards[i, 1] = d[1];
        Forwards[i, 2] = d[2];
        
        Rights[i, 0] = -Forwards[i - 1, 0];
        Rights[i, 1] = -Forwards[i - 1, 1];
        Rights[i, 2] = -Forwards[i - 1, 2];
        
        var u = rotate_axis(Ups[i - 1, 0], Ups[i - 1, 1], Ups[i - 1, 2], Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], angle);
        Ups[i, 0] = u[0];
        Ups[i, 1] = u[1];
        Ups[i, 2] = u[2];
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 데이터를 기반으로 노래 타임라인 생성하기

OneBeatRate = (1 / (song_get_bpm(obj_Jukebox.Selected) / 60)) * 1000;

var currentTime = 0;

Timeline[0] = 0;
for(var i = 1; i &lt; DataLength; i++)
{
    currentTime += (OneBeatRate * Data[i, 1] * Data[i, 2]);
    Timeline[i] = currentTime;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///카메라 초기화

obj_Camera.PositionX = 0;
obj_Camera.PositionY = 0;
obj_Camera.PositionZ = 0;

obj_Camera.ForwardX = 1;
obj_Camera.ForwardY = 0;
obj_Camera.ForwardZ = 0;

obj_Camera.RightX = 0;
obj_Camera.RightY = 1;
obj_Camera.RightZ = 0;

obj_Camera.UpX = 0;
obj_Camera.UpY = 0;
obj_Camera.UpZ = 1;

obj_Camera.TargetPositionX = 0;
obj_Camera.TargetPositionY = 0;
obj_Camera.TargetPositionZ = 0;

obj_Camera.TargetForwardX = 1;
obj_Camera.TargetForwardY = 0;
obj_Camera.TargetForwardZ = 0;

obj_Camera.TargetRightX = 0;
obj_Camera.TargetRightY = 1;
obj_Camera.TargetRightZ = 0;

obj_Camera.TargetUpX = 0;
obj_Camera.TargetUpY = 0;
obj_Camera.TargetUpZ = 1;

obj_Camera.SmoothSpeed = 0.1;
obj_Camera.TargetScale = 50;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///큐브 초기화

obj_Cube.PositionX = 0;
obj_Cube.PositionY = 0;
obj_Cube.PositionZ = 0;

obj_Cube.ForwardX = 1;
obj_Cube.ForwardY = 0;
obj_Cube.ForwardZ = 0;

obj_Cube.RightX = 0;
obj_Cube.RightY = 1;
obj_Cube.RightZ = 0;

obj_Cube.UpX = 0;
obj_Cube.UpY = 0;
obj_Cube.UpZ = 1;

obj_Cube.Angle = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD 초기화

obj_HUD.AssistanceText = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///노래 시작

audio_stop_all();

audio_master_gain(1.0);
Song = audio_play_sound(song_get_object(obj_Jukebox.Selected), 0, false);

SongStartTime = current_time;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 타일 인덱스 증가

if(IsTileOpening)
{
    if(Timeline[TileIndex] &lt; current_time - TileOpenTime &amp;&amp; TileIndex &lt; DataLength - 2)
    {
        TileIndex++;
        
        var tile = instance_position_3d(Positions[TileIndex, 0], Positions[TileIndex, 1], Positions[TileIndex, 2], obj_Tile);
        tile.AngleStart = 90 + (Data[TileIndex, 1] * 90);
        tile.RotateSpeed = tile.AngleStart / (OneBeatRate / (1000 / fps) * Data[TileIndex, 1] * Data[TileIndex, 2]);
        with(tile) event_user(0);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 큐브 인덱스 증가

if(IsGamePlaying)
{
    if(Timeline[CubeIndex] &lt; current_time - GameStartTime &amp;&amp; CubeIndex &lt; DataLength - 1)
    {
        if(CubeIndex &lt; DataLength - 2)
        {
            var tile = instance_position_3d(Positions[CubeIndex, 0], Positions[CubeIndex, 1], Positions[CubeIndex, 2], obj_Tile);
            tile.FadeOutSpeed = 0.05;
            with(tile) event_user(1);
        }
        
        CubeIndex++;
        
        if(CubeIndex &lt; DataLength - 1)
        {
            obj_Cube.AngleStart = Data[CubeIndex, 1] * 90;
            obj_Cube.RotateSpeed = obj_Cube.AngleStart / (OneBeatRate / (1000 / fps) * Data[CubeIndex, 1] * Data[CubeIndex, 2]);
            with(obj_Cube) event_user(0);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///큐브 이동

if(CubeIndex &lt; DataLength - 1)
{
    obj_Cube.PositionX = Positions[CubeIndex, 0];
    obj_Cube.PositionY = Positions[CubeIndex, 1];
    obj_Cube.PositionZ = Positions[CubeIndex, 2];
    
    obj_Cube.ForwardX = Forwards[CubeIndex, 0];
    obj_Cube.ForwardY = Forwards[CubeIndex, 1];
    obj_Cube.ForwardZ = Forwards[CubeIndex, 2];
    
    obj_Cube.RightX = Rights[CubeIndex, 0];
    obj_Cube.RightY = Rights[CubeIndex, 1];
    obj_Cube.RightZ = Rights[CubeIndex, 2];
    
    obj_Cube.UpX = Ups[CubeIndex, 0];
    obj_Cube.UpY = Ups[CubeIndex, 1];
    obj_Cube.UpZ = Ups[CubeIndex, 2];
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///노트 판정

if(IsGamePlaying &amp;&amp; CubeIndex &gt; 0)
{
    var currentTime = current_time - GameStartTime;
    var hit = keyboard_check_pressed(vk_anykey) || mouse_check_button_pressed(mb_any);
    
    var lastNoteTime = Timeline[CubeIndex - 1];
    
    var currentNoteTime = Timeline[CubeIndex];
    
    if((lastNoteTime &lt; currentTime) &amp;&amp; (currentTime &lt; lastNoteTime + JudgementRate) &amp;&amp; CubeIndex &gt; 1)
    {
        if(hit &amp;&amp; IsHitted == false)
        {
            IsHitted = true;
        }
    }
    
    if((lastNoteTime + JudgementRate &lt; currentTime) &amp;&amp; (currentTime &lt; currentNoteTime - JudgementRate))
    {
        if(!IsInMissJudgement)
        {
            if(IsHitted == false)
            {
                room_restart();
            }
            IsInMissJudgement = true;
            IsHitted = false;
        }
        
        if(hit)
        {
            room_restart();
        }
    }
    else
    {
        IsInMissJudgement = false;
    }
    
    if((currentNoteTime - JudgementRate &lt; currentTime) &amp;&amp; (currentTime &lt; currentNoteTime))
    {
        if(hit &amp;&amp; IsHitted == false)
        {
            IsHitted = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///카메라 이동

if(CubeIndex &lt; DataLength - 1)
{
    obj_Camera.TargetPositionX = Positions[CubeIndex, 0];
    obj_Camera.TargetPositionY = Positions[CubeIndex, 1];
    obj_Camera.TargetPositionZ = Positions[CubeIndex, 2];
    
    obj_Camera.TargetForwardX = Forwards[CubeIndex, 0];
    obj_Camera.TargetForwardY = Forwards[CubeIndex, 1];
    obj_Camera.TargetForwardZ = Forwards[CubeIndex, 2];
    
    obj_Camera.TargetRightX = Rights[CubeIndex, 0];
    obj_Camera.TargetRightY = Rights[CubeIndex, 1];
    obj_Camera.TargetRightZ = Rights[CubeIndex, 2];
    
    obj_Camera.TargetUpX = Ups[CubeIndex, 0];
    obj_Camera.TargetUpY = Ups[CubeIndex, 1];
    obj_Camera.TargetUpZ = Ups[CubeIndex, 2];
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///타일 펼치기 시작

var currentTime = current_time - SongStartTime;

if(!IsTileOpening &amp;&amp; song_get_startTime(obj_Jukebox.Selected) - (OneBeatRate * 8) &lt; currentTime)
{
    IsTileOpening = true;
    TileOpenTime = current_time;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///키 입력

var hit = keyboard_check_pressed(vk_anykey) || mouse_check_button_pressed(mb_any);

if(hit)
{
    obj_HUD.VignetteRadiusMin = 0.3;
    obj_HUD.VignetteRadiusMax = 1.1;
    obj_Camera.Scale = 57;
    audio_play_sound(snd_hihat, 0, false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///메트로놈

var currentTime = current_time - SongStartTime;

for(var i = 0; i &lt; 4; i++)
{
    if(!IsTicked[i] &amp;&amp; song_get_startTime(obj_Jukebox.Selected) - (OneBeatRate * (3 - i)) &lt; currentTime)
    {
        IsTicked[i] = true;
        if(i == 0) audio_play_sound(snd_tick1, 0, false);
        else audio_play_sound(snd_tick2, 0, false);
        
        if(i == 3) obj_HUD.AssistanceText = "START!";
        else obj_HUD.AssistanceText = string(3 - i);
    }
}

if(CubeIndex == 2) obj_HUD.AssistanceText = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///게임 시작

var currentTime = current_time - SongStartTime;

if(IsTileOpening &amp;&amp; !IsGamePlaying &amp;&amp; song_get_startTime(obj_Jukebox.Selected) &lt; currentTime)
{
    IsGamePlaying = true;
    GameStartTime = current_time;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///클리어

if(CubeIndex == DataLength - 1)
{
    obj_HUD.AssistanceText = "Clear!";
    IsGamePlaying = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
