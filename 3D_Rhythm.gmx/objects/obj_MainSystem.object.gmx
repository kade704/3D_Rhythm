<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///변수 초기화

Index = 1;
IsPlaying = false;
SongStartTime = 0;

IsHitted = noone;
JudgementRate = 150;

CameraScale = 65;
CameraSmoothSpeed = 0.02;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///카메라 위치 초기화

obj_Camera.EyeX = -CameraScale;
obj_Camera.EyeY =  CameraScale;
obj_Camera.EyeZ =  CameraScale;

obj_Camera.CenterX = 0;
obj_Camera.CenterY = 0;
obj_Camera.CenterZ = 0;

obj_Camera.UpX = 0;
obj_Camera.UpY = 0;
obj_Camera.UpZ = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///큐브 위치 초기화

obj_Cube.PositionX = 0;
obj_Cube.PositionY = 0;
obj_Cube.PositionZ = 0;

obj_Cube.ForwardX = 1;
obj_Cube.ForwardY = 0;
obj_Cube.ForwardZ = 0;

obj_Cube.RightX = 0;
obj_Cube.RightY = 1;
obj_Cube.RightZ = 0;

obj_Cube.UpX = 0;
obj_Cube.UpY = 0;
obj_Cube.UpZ = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///큐브 회전 초기화

obj_Cube.Angle = 90;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
alarm[0] = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 파일에서 데이터 불러오기

var path = song_get_path(obj_Jukebox.Selected);

Data[0, 0] = 0;
Data[0, 1] = 1;

if(file_exists(path))
{
    var file = file_text_open_read(path);    

    for(var i = 1; !file_text_eof(file); i++)
    {
        Data[i, 0] = file_text_read_real(file);
        Data[i, 1] = file_text_read_real(file);
        file_text_readln(file);
    }
    file_text_close(file);
    
    log("File Successfully Loaded : " + path);
}
else 
{
    error("File does not exist. : " + path);
}

DataLength = array_height_2d(Data);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 데이터를 기반으로 위치, 포워드, 라이트, 업 벡터 생성하기

Positions[0, 0] = 0;
Positions[0, 1] = 0;
Positions[0, 2] = 0;

Forwards[0, 0] = 1;
Forwards[0, 1] = 0;
Forwards[0, 2] = 0;

Rights[0, 0] = 0;
Rights[0, 1] = 1;
Rights[0, 2] = 0;

Ups[0, 0] = 0;
Ups[0, 1] = 0;
Ups[0, 2] = 1;

for(var i = 1; i &lt; DataLength; i++)
{
    if(Data[i, 0] == -1) //좌회전 진행
    {   
        var angle = (90 * Data[i, 1]) - 90;
        
        var d = rotate_axis(-Rights[i - 1, 0], -Rights[i - 1, 1], -Rights[i - 1, 2], Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (-Rights[i - 1, 0] * 5) + (d[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (-Rights[i - 1, 1] * 5) + (d[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (-Rights[i - 1, 2] * 5) + (d[2] * 5);
        
        Forwards[i, 0] = d[0];
        Forwards[i, 1] = d[1];
        Forwards[i, 2] = d[2];
        
        Rights[i, 0] = Forwards[i - 1, 0];
        Rights[i, 1] = Forwards[i - 1, 1];
        Rights[i, 2] = Forwards[i - 1, 2];
        
        var u = rotate_axis(Ups[i - 1, 0], Ups[i - 1, 1], Ups[i - 1, 2], Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], angle);
        Ups[i, 0] = u[0];
        Ups[i, 1] = u[1];
        Ups[i, 2] = u[2];
    }
    else if(Data[i, 0] == 1) //우회전 진행
    {   
        var angle = 90 - (90 * Data[i, 1]);
        
        var d = rotate_axis(Rights[i - 1, 0], Rights[i - 1, 1], Rights[i - 1, 2], Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (Rights[i - 1, 0] * 5) + (d[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (Rights[i - 1, 1] * 5) + (d[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (Rights[i - 1, 2] * 5) + (d[2] * 5);
        
        Forwards[i, 0] = d[0];
        Forwards[i, 1] = d[1];
        Forwards[i, 2] = d[2];
        
        Rights[i, 0] = -Forwards[i - 1, 0];
        Rights[i, 1] = -Forwards[i - 1, 1];
        Rights[i, 2] = -Forwards[i - 1, 2];
        
        var u = rotate_axis(Ups[i - 1, 0], Ups[i - 1, 1], Ups[i - 1, 2], Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], angle);
        Ups[i, 0] = u[0];
        Ups[i, 1] = u[1];
        Ups[i, 2] = u[2];
    }
    else //직진 진행
    {
        var angle = (90 * Data[i, 1] - 90);
        
        var d = rotate_axis(Forwards[i - 1, 0], Forwards[i - 1, 1], Forwards[i - 1, 2], Rights[i - 1, 0], Rights[i - 1, 1], Rights[i - 1, 2], angle);
        Positions[i, 0] = Positions[i - 1, 0] + (Forwards[i - 1, 0] * 5) + (d[0] * 5);
        Positions[i, 1] = Positions[i - 1, 1] + (Forwards[i - 1, 1] * 5) + (d[1] * 5);
        Positions[i, 2] = Positions[i - 1, 2] + (Forwards[i - 1, 2] * 5) + (d[2] * 5);
        
        Forwards[i, 0] = d[0];
        Forwards[i, 1] = d[1];
        Forwards[i, 2] = d[2];
        
        Rights[i, 0] = Rights[i - 1, 0];
        Rights[i, 1] = Rights[i - 1, 1];
        Rights[i, 2] = Rights[i - 1, 2];
        
        var u = rotate_axis(Ups[i - 1, 0], Ups[i - 1, 1], Ups[i - 1, 2], Rights[i - 1, 0], Rights[i - 1, 1], Rights[i - 1, 2], angle);
        Ups[i, 0] = u[0];
        Ups[i, 1] = u[1];
        Ups[i, 2] = u[2];
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 데이터를 기반으로 노래 타임라인 생성하기

OneBeatRate = (1 / (song_get_bpm(obj_Jukebox.Selected) / 60)) * 1000;

var currentTime = 0;

Timeline[0] = 0;
for(var i = 1; i &lt; DataLength; i++)
{
    currentTime += (OneBeatRate * Data[i, 1]);
    Timeline[i] = currentTime;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///노래 시작

audio_play_sound(song_get_object(obj_Jukebox.Selected), 0, false);
audio_master_gain(0.5);

IsPlaying = true;
SongStartTime = current_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///큐브 회전

if(IsPlaying)
{
    if(Timeline[Index] &lt; current_time - SongStartTime &amp;&amp; Index &lt; DataLength - 1)
    {
        Index++;
        obj_Cube.Angle = 90;
    }
    obj_Cube.Angle -= 90 / (OneBeatRate / (delta_time * 0.001));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///큐브 이동

obj_Cube.PositionX = Positions[Index, 0];
obj_Cube.PositionY = Positions[Index, 1];
obj_Cube.PositionZ = Positions[Index, 2];

obj_Cube.ForwardX = Forwards[Index, 0];
obj_Cube.ForwardY = Forwards[Index, 1];
obj_Cube.ForwardZ = Forwards[Index, 2];

obj_Cube.RightX = Rights[Index, 0];
obj_Cube.RightY = Rights[Index, 1];
obj_Cube.RightZ = Rights[Index, 2];

obj_Cube.UpX = Ups[Index, 0];
obj_Cube.UpY = Ups[Index, 1];
obj_Cube.UpZ = Ups[Index, 2];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///노트 판정

if(IsPlaying)
{
    var key = keyboard_check_pressed(vk_anykey);
    
    var lastNoteTime = Timeline[Index - 1];
    var currentNoteTime = Timeline[Index];
    
    if((lastNoteTime &lt; current_time - SongStartTime) &amp;&amp; (current_time - SongStartTime &lt; lastNoteTime + JudgementRate) &amp;&amp; Index &gt; 1)
    {
        if(key &amp;&amp; IsHitted == false)
        {
            IsHitted = true;
        }
    }
    
    if((lastNoteTime + JudgementRate &lt; current_time - SongStartTime) &amp;&amp; (current_time - SongStartTime &lt; currentNoteTime - JudgementRate))
    {
        if(IsHitted == false)
        {
            room_restart();
        }
        if(key)
        {
            room_restart();
        }
        IsHitted = noone;
    }
    
    if((currentNoteTime - JudgementRate &lt; current_time - SongStartTime) &amp;&amp; (current_time - SongStartTime &lt; currentNoteTime))
    {
        if(IsHitted == noone)
        {
            IsHitted = false;
        }
        if(key &amp;&amp; IsHitted == false)
        {
            IsHitted = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///카메라 이동

var px = Positions[Index, 0];
var py = Positions[Index, 1];
var pz = Positions[Index, 2];

var fx = Forwards[Index, 0];
var fy = Forwards[Index, 1];
var fz = Forwards[Index, 2];

var rx = Rights[Index, 0];
var ry = Rights[Index, 1];
var rz = Rights[Index, 2];

var ux = Ups[Index, 0];
var uy = Ups[Index, 1];
var uz = Ups[Index, 2];

obj_Camera.CenterX = lerp(obj_Camera.CenterX, px, CameraSmoothSpeed);
obj_Camera.CenterY = lerp(obj_Camera.CenterY, py, CameraSmoothSpeed);
obj_Camera.CenterZ = lerp(obj_Camera.CenterZ, pz, CameraSmoothSpeed);

obj_Camera.EyeX = lerp(obj_Camera.EyeX, px - (fx * CameraScale) + (rx * CameraScale) + (ux * CameraScale), CameraSmoothSpeed);
obj_Camera.EyeY = lerp(obj_Camera.EyeY, py - (fy * CameraScale) + (ry * CameraScale) + (uy * CameraScale), CameraSmoothSpeed);
obj_Camera.EyeZ = lerp(obj_Camera.EyeZ, pz - (fz * CameraScale) + (rz * CameraScale) + (uz * CameraScale), CameraSmoothSpeed);

obj_Camera.UpX = lerp(obj_Camera.UpX, ux, CameraSmoothSpeed);
obj_Camera.UpY = lerp(obj_Camera.UpY, uy, CameraSmoothSpeed);
obj_Camera.UpZ = lerp(obj_Camera.UpZ, uz, CameraSmoothSpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
